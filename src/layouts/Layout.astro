---
import "@/styles/global.css";

import Navbar from "@/components/ui/Navbar.astro";
import { SITE_INFO } from "@/constants/site-info";

interface Props {
  title?: string;
  description?: string;
  image?: string;
  keywords?: string;
}

const {
  title = SITE_INFO.title,
  description = SITE_INFO.description,
  image,
  keywords = "",
} = Astro.props;
---

<!doctype html>
<html lang="en" class="">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href="" />
    <meta name="generator" content={Astro.generator} />

    <!-- Meta tags -->
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content="Cesar Villalobos Olmos" />
    <meta name="robots" content="index, follow" />
    <meta http-equiv="Content-Language" content="en" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <meta
      name="keywords"
      content={`Cesar, ProgramaciÃ³n, Desarrollo Web, Full-Stack Developer, Mobile App Developer, Web Developer, Front-End Developer, Back-End Developer, Java, JavaScript, React, React Native, TypeScript, C#, Spring, ASP.NET ${keywords}`}
    />

    <!-- Open Graph - Facebook -->
    <meta name="og:title" content={title} />
    <meta name="og:description" content={description} />
    <meta name="og:url" content={Astro.url} />
    <meta name="og:type" content="website" />
    {image && <meta name="og:image" content={image} />}

    <!-- Open Graph - Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={Astro.url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={image} />

    <title>
      {title}
    </title>
  </head>

  <body class="text-black dark:text-white">
    <div
      class="fixed inset-0 -z-10 h-full w-full bg-neutral-100 dark:bg-neutral-900 selection:bg-neutral-200 dark:selection:bg-neutral-700 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"
    ></div>

    <main class="w-[90%] max-w-3xl mx-auto py-4">
      <Navbar />
      <slot />
    </main>
  </body>
</html>

<style is:global>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    scroll-behavior: smooth;
  }

  /* .copy-code {
    position: absolute;
    top: 0;
    right: 0;
    background-color: #3730a3;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    line-height: 1rem;
  }

  .copy-code:hover {
    background-color: #312e81;
  } */
</style>

<!-- <script>
  let copyButtonLabel = "Copy Code";
  let codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);

    (codeBlock.parentNode as any).insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: any, button: any) {
    let code = block.querySelector("code");
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    button.innerText = "Code Copied";

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 700);
  }
</script> -->
